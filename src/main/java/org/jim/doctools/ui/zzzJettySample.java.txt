package org.jim.doctools.ui;

import java.io.IOException;
import java.util.Enumeration;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.eclipse.jetty.server.Handler;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.HandlerCollection;
import org.eclipse.jetty.server.handler.ResourceHandler;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.webapp.WebAppContext;

public class JettySample  implements Runnable  {
	private Thread t;
	   private String threadName;
	   private  static Logger log = LogManager.getLogger(JettySample.class);
	   
	   public   JettySample( String name) {
		      threadName = name;
		      log.info("Creating " +  threadName );
		   }
	   
	   public void run() {
		   try {
			   Server server = new Server(8980);
				
				WebAppContext ctx = new WebAppContext();
				ctx.setContextPath("/");
				ctx.setWar("src/main/webapp/");
				HandlerCollection hc = new HandlerCollection();
				hc.setHandlers(new Handler[] {ctx});
				
				server.setHandler(hc);
				server.setStopAtShutdown(true);
				server.start();
				
				server.join();
		   }catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	  }
	   
	   
	   private    void  run_bak2()  {
		   try {
				Server server = new Server(8980);
		
				  ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
				  // Or ServletContextHandler.NO_SESSIONS
				  context.setContextPath("/");
				  server.setHandler(context);
		
				  // http://localhost:8980/hello
				  context.addServlet(new ServletHolder(new HelloServlet()), "/hello");

				  // http://localhost:8980/hello/Kerronex
				  
				  ResourceHandler resourceHandler = new ResourceHandler();
				  resourceHandler.setResourceBase(".");
			      resourceHandler.setDirectoriesListed(true); 
			      
			      context.setHandler(resourceHandler);
			      
				  //context.addServlet(resourceHandler.getHandler(), ".");
			      server.setStopAtShutdown(true);
				  server.start();
				  server.join();
				  
		   }
		  catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	private    void  run_bak() {
		try {
			// Create a basic jetty server object that will listen on port 8980.
	        // Note that if you set this to port 0 then a randomly available port
	        // will be assigned that you can either look in the logs for the port,
	        // or programmatically obtain it for use in test cases.
			
			Server server = new Server(8980);
			
	        // The ServletHandler is a dead simple way to create a context handler
	        // that is backed by an instance of a Servlet.
	        // This handler then needs to be registered with the Server object.
			//ResourceHandler resourceHandler = new ResourceHandler();
	        ServletHandler handler = new ServletHandler();
	       // resourceHandler.setResourceBase(".");
	       // resourceHandler.setDirectoriesListed(true); 
	       
	       // server.setHandler(resourceHandler);
	        server.setHandler(handler);
	        
	        // Passing in the class for the Servlet allows jetty to instantiate an
	        // instance of that Servlet and mount it on a given context path.
	
	        // IMPORTANT:
	        // This is a raw Servlet, not a Servlet that has been configured
	        // through a web.xml @WebServlet annotation, or anything similar.
	        handler.addServletWithMapping(HelloServlet.class, "/hello");
	        handler.addServletWithMapping(HelloAjaxServlet.class, "/api");
	
	        // Start things up!
	        server.setStopAtShutdown(true);
			server.start();

	        // The use of server.join() the will make the current thread join and
	        // wait until the server is done executing.
	        // See
	        // http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#join()
			server.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void start () {
		log.info("Starting " +  threadName );
	      if (t == null) {
	         t = new Thread (this, threadName);
	         t.start ();
	      }
	   }
	
	@SuppressWarnings("serial")
    public   static class HelloServlet extends HttpServlet
    {
        @Override
        protected void doGet( HttpServletRequest request,
                              HttpServletResponse response ) throws ServletException,
                                                            IOException
        {
            response.setContentType("text/html");
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().println("<h1>Hello from HelloServlet</h1>");
        }
    }
	
	@SuppressWarnings("serial")
    public   static class HelloAjaxServlet extends HttpServlet
    {
        @Override
        protected void doGet( HttpServletRequest request,
                              HttpServletResponse response ) throws ServletException,
                                                            IOException
        {
            response.setContentType("text/html");
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().println("<h1>Hello from HelloServlet</h1>");
        }
    }
}


